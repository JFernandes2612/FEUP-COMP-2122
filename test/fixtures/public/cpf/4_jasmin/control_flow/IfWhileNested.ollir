import ioPlus;
IfWhileNested {

    .construct IfWhileNested().V {
        invokespecial(this, "<init>").V;
    }

    .method public func(a.i32).i32 {
flag.bool :=.bool true.bool;
i.i32 :=.i32 0.i32;
if (i.i32 <.bool a.i32) goto whilebody_1;
goto endwhile_1;
whilebody_1:

if (flag.bool) goto ifbody_0;
    invokestatic(ioPlus, "printResult", 2.i32).V;
goto endif_0;
ifbody_0:
    invokestatic(ioPlus, "printResult", 1.i32).V;
endif_0:
flag.bool :=.bool !.bool flag.bool;
i.i32 :=.i32 i.i32 +.i32 1.i32;
if (i.i32 <.bool a.i32) goto whilebody_1;
endwhile_1:
ret.i32 1.i32;
    }
    .method public static main(args.array.String).V {
d.IfWhileNested :=.IfWhileNested new(IfWhileNested).IfWhileNested;
invokespecial(d.IfWhileNested,"<init>").V;
a.i32 :=.i32 invokevirtual(d.IfWhileNested, "func", 3.i32).i32;

ret.V;
    }

}